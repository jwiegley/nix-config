--- a/src/ld/HeaderAndLoadCommands.hpp	2025-06-01 14:18:21.265095063 -0700
+++ b/src/ld/HeaderAndLoadCommands.hpp	2025-06-01 14:23:55.542717508 -0700
@@ -470,7 +470,14 @@
 	
 	if ( _hasRPathLoadCommands ) {
 		const std::vector<const char*>& rpaths = _options.rpaths();
+		std::set<std::string> seen;
+
 		for (std::vector<const char*>::const_iterator it = rpaths.begin(); it != rpaths.end(); ++it) {
+			std::string it_(*it);
+			if (seen.find(it_) != std::end(seen))
+				continue;
+			seen.insert(it_);
+
 			sz += alignedSize(sizeof(macho_rpath_command<P>) + strlen(*it) + 1);
 		}
 	}
@@ -579,7 +586,17 @@
 	
 	count += _dylibLoadCommmandsCount;
 
-	count += _options.rpaths().size();
+	{
+		const std::vector<const char*>& rpaths = _options.rpaths();
+		std::set<std::string> seen;
+		for (std::vector<const char*>::const_iterator it = rpaths.begin(); it != rpaths.end(); ++it) {
+			std::string it_(*it);
+			if (seen.find(it_) != std::end(seen))
+				continue;
+			seen.insert(it_);
+			++count;
+		}
+	}
 	
 	if ( _hasSubFrameworkLoadCommand )
 		++count;
@@ -1764,7 +1781,15 @@
 
 	if ( _hasRPathLoadCommands ) {
 		const std::vector<const char*>& rpaths = _options.rpaths();
+		std::set<std::string> seen;
+
 		for (std::vector<const char*>::const_iterator it = rpaths.begin(); it != rpaths.end(); ++it) {
+			std::string it_(*it);
+			if (seen.find(it_) != std::end(seen))
+				continue;
+
+			seen.insert(it_);
+
 			p = this->copyRPathLoadCommand(p, *it);
 		}
 	}
