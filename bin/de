#!/usr/bin/env bash

set -e

# jww (2020-04-01): I use this to keep build products in a separate directory
# tree.
PRODUCTS=""
if [[ -d $HOME/Products ]]; then
    PRODUCTS=$(echo $PWD | sed -E 's/\b(kadena|src)\b/Products/')
    echo "There is a ~/Products directory"
fi

NOCACHE=false
if [[ "$1" == "--no-cache" ]]; then
    shift 1
    NOCACHE=true
    echo "Disabling use of the Nix cache"
fi

NIXOPTS=(--cores 2 -j4)
NIXOPTS_MORE=()

if [[ $PWD =~ kadena || $PWD =~ athena ]]; then
    if [[ $NOCACHE == false ]]; then
        echo Building direnv cache for a Kadena project...
        NIXOPTS+=(--extra-substituters 'https://nixcache.chainweb.com')
        NIXOPTS+=(--extra-trusted-public-keys 'nixcache.chainweb.com:FVN503ABX9F8x8K0ptnc99XEz5SaA4Sks6kNcZn2pBY=')
    fi
elif [[ -f flake.nix ]]; then
    echo "Using the package set for <darwin>"
    # NIXOPTS_MORE+=(--override-input nixpkgs nixpkgs --inputs-from ~/src/nix)
else
    echo "Using the package set for <darwin>"
    NIXOPTS_MORE+=(--arg pkgs '(import<darwin>{}).pkgs')
fi

if [[ -n ${BUILDER+x} ]]; then
    NIXOPTS+=(--option builders "ssh-ng://${BUILDER}")
    echo "Using builder: ssh-ng://${BUILDER}"
fi

if [[ ! -f .envrc ]]; then
    cat > .envrc <<'EOF'
keep_vars() {
    local v
    for k in $@; do
        eval "v=\$$k"
        DIRENV_kept="$DIRENV_kept"$(printf "%s=%s\000" "$k" "$v" | base64)
    done
}

reset_kept() {
    : ${DIRENV_kept?No environment stored. Missing keep_except()?}
    echo "$DIRENV_kept" | base64 -d | while IFS= read -r -d '' V; do
        echo "export ${V%%=*}='${V#*=}'"
    done
    unset DIRENV_kept
}

keep_vars                                       \
    ALTERNATE_EDITOR                            \
    EDITOR                                      \
    EMACS_SERVER_FILE                           \
    GIT_PROMPT_EXECUTABLE                       \
    ITERM_SESSION_ID                            \
    NIX_PATH                                    \
    SECURITYSESSIONID                           \
    SSH_AUTH_SOCK                               \
    SSL_CERT_FILE                               \
    TERM                                        \
    TERM_SESSION_ID                             \
    TMPDIR                                      \
    XDG_DATA_DIRS                               \
    __GIT_PROMPT_DIR

source <(direnv apply_dump .envrc.cache)
source <(reset_kept)

watch_file .envrc
watch_file .envrc.cache
watch_file default.nix
EOF

    [[ -f package.nix ]] && echo "watch_file package.nix" >> .envrc
    [[ -f shell.nix ]] && echo "watch_file shell.nix" >> .envrc

    if [[ -n "$PRODUCTS" ]]; then
        if [[ -f package.yaml \
           || -n "$(find . -maxdepth 1 -name '*.cabal')" ]]; then
            cat >> .envrc <<EOF

export CABAL_BUILDDIR=$PRODUCTS/dist
EOF
        fi

        if [[ -f Cargo.toml || -f ../Cargo.toml ]]; then
            cat >> .envrc <<EOF

export CARGO_TARGET_DIR=$PRODUCTS/target
export CARGO_HOME=\$CARGO_TARGET_DIR/.cargo-home
# export RUSTUP_HOME=\$CARGO_TARGET_DIR/.rustup-home
# export RUSTUP_TOOLCHAIN=1.60.0-x86_64-apple-darwin
# export RUSTC_WRAPPER=$(which sccache)
export PATH=\$PATH:\$CARGO_HOME/bin
export PATH=\$PATH:\$CARGO_TARGET_DIR/x86_64-apple-darwin/debug
export PATH=\$PATH:\$CARGO_TARGET_DIR/x86_64-apple-darwin/release
EOF
        fi
    fi
fi

export NIXPKGS_ALLOW_UNFREE=1
export NIXPKGS_ALLOW_BROKEN=1

SCRIPT="unset         \
    ALTERNATE_EDITOR  \
    EDITOR            \
    EMACS_SERVER_FILE \
    ITERM_SESSION_ID  \
    NIX_PATH          \
    SECURITYSESSIONID \
    SSH_AUTH_SOCK     \
    SSL_CERT_FILE     \
    TERM              \
    TERM_SESSION_ID;  \
direnv dump > .envrc.cache"

if [[ -f flake.nix ]]; then
    nix develop "${NIXOPTS[@]}" "$@" "${NIXOPTS_MORE[@]}" -c bash -c "$SCRIPT"
elif [[ -f shell-new.nix ]]; then
    nix-shell shell-new.nix "${NIXOPTS[@]}" "$@" -Q "${NIXOPTS_MORE[@]}" --run "$SCRIPT"
else
    nix-shell "${NIXOPTS[@]}" "$@" -Q "${NIXOPTS_MORE[@]}" --run "$SCRIPT"
fi

direnv reload
